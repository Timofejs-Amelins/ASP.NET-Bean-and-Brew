<!--make use of the baked goods order model to access order properties-->
@model Beanbrew.Models.BakedGoodsOrder

<!--give the page the "Edit" title-->
@{
    ViewData["Title"] = "Edit";
}

<!--these headings further clearly tell user this is for editing an order-->
<h1>Edit</h1>

<h4>BakedGoodsOrder</h4>

<!--we then have the hr for seperating the form out from the headings-->
<hr />

<!--like any other CRUD webform the form takes up 33% of the page width-->
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <!--validation error messages can be displayed at the top-->
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <!--the baked goods order ID is hidden, it is autoincrement key-->
            <input type="hidden" asp-for="BakedGoodsOrderId" />

            <!--the quantity can or can not be changed-->
            <div class="form-group">
                <label asp-for="Quantity" class="control-label"></label>
                <input asp-for="Quantity" class="form-control" />
                <span asp-validation-for="Quantity" class="text-danger"></span>
            </div>

            <!--the user can select a baked goods id from the dropdown-->
            <div class="form-group">
                <label asp-for="BakedGoodsId" class="control-label"></label>
                <select asp-for="BakedGoodsId" class="form-control" asp-items="ViewBag.BakedGoodsId"></select>
                <span asp-validation-for="BakedGoodsId" class="text-danger"></span>
            </div>

            <!--the user can even change the customer in case of mistakes-->
            <div class="form-group">
                <label asp-for="CustomerId" class="control-label"></label>
                <select asp-for="CustomerId" class="form-control" asp-items="ViewBag.CustomerId"></select>
                <span asp-validation-for="CustomerId" class="text-danger"></span>
            </div>

            <!--the user can also change hamper id if packaging is small-->
            <div class="form-group">
                <label asp-for="HamperId" class="control-label"></label>
                <select asp-for="HamperId" class="form-control" asp-items="ViewBag.HamperId"></select>
                <span asp-validation-for="HamperId" class="text-danger"></span>
            </div>

            <!--Beautiful Bootstrap submit button that is consistent-->
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<!--the back to list button is always as many pixels below form as others-->
<div>
    <a asp-action="Index">Back to List</a>
</div>

<!--we need to import 2 scripts defined in file for frontend validation-->
@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
